AC_INIT(libgnomecanvas)

# Making releases:
#   LIBGNOMECANVAS_MICRO_VERSION += 1;
#   LIBGNOMECANVAS_INTERFACE_AGE += 1;
#   LIBGNOMECANVAS_BINARY_AGE += 1;
# if any functions have been added, set LIBGNOMECANVAS_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set LIBGNOMECANVAS_BINARY_AGE and LIBGNOMECANVAS_INTERFACE_AGE to 0.
#
LIBGNOMECANVAS_MAJOR_VERSION=2
LIBGNOMECANVAS_MINOR_VERSION=2
LIBGNOMECANVAS_MICRO_VERSION=1
LIBGNOMECANVAS_INTERFACE_AGE=1
LIBGNOMECANVAS_BINARY_AGE=201
# If you need a modifier for the version number. 
# Normally empty, but can be used to make "fixup" releases.
LIBGNOMECANVAS_EXTRAVERSION=

dnl libtool versioning from libgnome

LIBGNOMECANVAS_CURRENT=`expr 100 '*' $LIBGNOMECANVAS_MINOR_VERSION + $LIBGNOMECANVAS_MICRO_VERSION - $LIBGNOMECANVAS_INTERFACE_AGE`
LIBGNOMECANVAS_REVISION=$LIBGNOMECANVAS_INTERFACE_AGE
LIBGNOMECANVAS_AGE=`expr $LIBGNOMECANVAS_BINARY_AGE - $LIBGNOMECANVAS_INTERFACE_AGE`
LIBGNOMECANVAS_VERSION=$LIBGNOMECANVAS_MAJOR_VERSION.$LIBGNOMECANVAS_MINOR_VERSION.$LIBGNOMECANVAS_MICRO_VERSION$LIBGNOMECANVAS_EXTRAVERSION

AC_SUBST(LIBGNOMECANVAS_CURRENT)
AC_SUBST(LIBGNOMECANVAS_REVISION)
AC_SUBST(LIBGNOMECANVAS_AGE)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(libgnomecanvas, $LIBGNOMECANVAS_VERSION)

AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_YACC
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")

GNOME_COMPILE_WARNINGS

GETTEXT_PACKAGE=libgnomecanvas-2.0
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[Gettext package])

ALL_LINGUAS="am ar az be bg ca cs da de el es et fa fi fr ga he hi hu id it ja kn ko lv mk ml mn ms nl nn no pl pt pt_BR ro ru sk sl sr sr@Latn sv ta tr uk vi wa yi zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

GTK_REQUIRED=2.0.3
LIBART_REQUIRED=2.3.8
PANGO_REQUIRED=1.0.1
LIBGLADE_REQUIRED=2.0.0

dnl
dnl GTK+ check
dnl
CANVAS_MODULES="gtk+-2.0 >= $GTK_REQUIRED libart-2.0 >= $LIBART_REQUIRED pango >= $PANGO_REQUIRED pangoft2 >= $PANGO_REQUIRED"
PKG_CHECK_MODULES(LIBGNOMECANVAS, $CANVAS_MODULES)
AC_SUBST(LIBGNOMECANVAS_CFLAGS)
AC_SUBST(LIBGNOMECANVAS_LIBS)

PKG_CHECK_MODULES(CANVAS_GLADE, $CANVAS_MODULES libglade-2.0 >= $LIBGLADE_REQUIRED)
AC_SUBST(CANVAS_GLADE_CFLAGS)
AC_SUBST(CANVAS_GLADE_LIBS)

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    native_win32=yes
    ;;
  *)
    native_win32=no
    ;;
esac
AC_MSG_RESULT([$native_win32])
AM_CONDITIONAL(OS_WIN32, test "$native_win32" = yes)

AC_MSG_CHECKING([for Win32 platform in general])
case "$host" in
  *-*-mingw*|*-*-cygwin*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT($platform_win32)
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = yes)

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc. GTK+ uses this convention, so we must, too.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$native_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
	if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
	  msnative_struct='-fnative-struct'
	fi
	;;
      *)
	if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
	  msnative_struct='-mms-bitfields'
	fi
	;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries will be incompatible with prebuilt GTK+ DLLs])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi

dnl Don't use AC_PROG_AWK since we need the full pathname.
AC_PATH_PROGS(AWK, mawk gawk nawk awk, )
AC_PATH_PROGS(PERL, perl5 perl)

# glib-genmarshal
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])

if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)
GNOME_GTKDOC_CHECK

# define a MAINT-like variable REBUILD which is set if Perl
# and awk are found, so autogenerated sources can be rebuilt
AC_ARG_ENABLE(rebuilds, [  --disable-rebuilds      disable all source autogeneration rules],,enable_rebuilds=yes)
REBUILD=\#
if test "x$enable_rebuilds" = "xyes" && \
     test -n "$PERL" && \
     $PERL -e 'exit !($] >= 5.002)' > /dev/null 2>&1 && \
     test -n "$AWK" ; then
  REBUILD=
fi
AC_SUBST(REBUILD)

AC_OUTPUT([
Makefile
po/Makefile.in
libgnomecanvas/Makefile
libgnomecanvas/libgnomecanvas-2.0.pc
glade/Makefile
demos/Makefile
tests/Makefile
docs/Makefile
docs/reference/Makefile
])


